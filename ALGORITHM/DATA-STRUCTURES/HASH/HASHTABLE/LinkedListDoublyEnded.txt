public class LinkedListDoublyEnded {
    Node head;
    Node tail;

    public void insertFirst(int value) {
        Node newNode = new Node(value);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            head.prev = newNode;
            newNode.next = head;
            head = newNode;
        }
    }

    public void insertLast(int value) {
        Node newNode = new Node(value);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

    public void displayForward() {
        Node tmpNode = head;
        while (tmpNode != null) {
            tmpNode.displayValue();
            tmpNode = tmpNode.next;
        }
        System.out.println();
    }

    public void displayBackward() {
        Node tmpNode = tail;
        while (tmpNode != null) {
            tmpNode.displayValue();
            tmpNode = tmpNode.prev;
        }
        System.out.println();
    }

    public Node removeFirst() {
        Node nodeToDelete = null;
        if (!isEmpty()) {
            nodeToDelete = head;

            if (nodeToDelete.next == null) {
                head = null;
                tail = null;

            } else {
                Node nodeNext = nodeToDelete.next;
                head = nodeNext;
                nodeNext.prev = head;
                return nodeToDelete;
            }
        }
        return nodeToDelete;
    }

    public Node removeLast() {
        Node nodeToDelete = null;
        if (!isEmpty()) {
            nodeToDelete = tail;

            if (nodeToDelete.prev == null) {
                head = null;
                tail = null;

            } else {
                Node nodePrev = nodeToDelete.prev;
                tail = nodePrev;
                return nodeToDelete;
            }
        }
        return nodeToDelete;
    }

    public boolean isEmpty() {
        return head == null;
    }
}
