import java.util.ArrayList;
import java.util.List;

/*Oleksii Saiun. 2020-Jul-16.
 * Find the [Lowest Common Ancestor]
 * 
 * 
 * */
class Node {
	private int value;
	Node left;
	Node right;

	public Node(int value) {
		this.value = value;
	}

	public int getValue() {
		return value;
	}

	public void displayValue() {
		System.out.print(value + " ");
	}

}

class Tree {

	Node node;
	List<Integer> path1 = new ArrayList();
	List<Integer> path2 = new ArrayList();

	public Tree(Node node) {
		this.node = node;
	}


	public boolean calcPath(Node root, int key, List<Integer> path) {
		if (root == null) {
			return false;
		}

		if (root.getValue() == key) {
			path.add(root.getValue());
			return true;
		}

		if (calcPath(root.left, key, path)) {
			path.add(root.getValue());
			return true;
		}

		if (calcPath(root.right, key, path)) {
			path.add(root.getValue());
			return true;
		}

		return false;
	}

	public int findLCA(Node root, int key1, int key2) {
		Integer keyLCA = null;

		calcPath(root, key1, path1);
		calcPath(root, key2, path2);

		for (int index1 = 0; index1 < path1.size(); index1++) {
			for (int index2 = 0; index2 < path2.size(); index2++) {
				if (path1.get(index1) == path2.get(index2)) {
					keyLCA = path1.get(index1);
					return keyLCA;
				}
			}
		}
		return keyLCA;

	}

	public void displayPath(List<Integer> path) {

		for (Integer j : path) {
			System.out.print(j + " ");
		}
		System.out.println();
	}
}

public class TreeLowestCommonAncestorApp {
	public static void main(String[] args) {
		Node root = new Node(9);
		Node node3 = new Node(3);
		Node node2 = new Node(2);
		Node node1 = new Node(1);
		Node node11 = new Node(11);
		Node node10 = new Node(10);
		Node node8 = new Node(8);
		Node node16 = new Node(16);
		Node node17 = new Node(17);
		root.left = node3;
		node3.left = node2;
		node2.left = node1;
		node2.right = node11;

		root.right = node10;
		node10.left = node8;
		node10.right = node16;
		node16.right = node17;

		Tree tree = new Tree(root);
		System.out.println("key LCA:" + tree.findLCA(root, 9, 9));

	       /*
         *          9 
         *       3      10  
         *    2       8  16
         *  1  11           17
         *        
         *  LCA(2,3) = 3;
         *  LCA(1,3) = 3;
         *  LCA(3,10) = 9;
         *  LCA(9,9) = 9;
         * */
	}

}
