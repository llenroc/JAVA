import java.util.LinkedList;
import java.util.Queue;

/*2020-Aug-12. Oleksii Saiun. Find max width of tree
 * we use an idea of BFS
 * 
 *  Tree:
            7
         4     12  
       2     11    14
      1  3       13  15
                       16

max width = 4;
 * */
class Tree {
	Node root;

	public Tree(Node root) {
		this.root = root;
	}

	public int findMaxWidth(Node root) {
		int height=0;
		int weight=0;
		int maxWeight=0;
		Node dummyNode= new Node(-9);
		if (root == null) {
			return 0;
		}

		Queue<Node> queue = new LinkedList<>();
		queue.offer(root);
		queue.offer(dummyNode);

		while (!queue.isEmpty()) {
			Node tmpNode = queue.poll();
			
			//calc width
			if(tmpNode.getValue()!=dummyNode.getValue())
			{
				weight=weight+1;
			}
			else
			{
/*if we face dummyNode than
 -reset index
 -find max value between previous max and current max
*/
				maxWeight=Math.max(maxWeight, weight);
				weight=0;
			}
			
			//calc height
            if(tmpNode.getValue()==dummyNode.getValue())
            {
            	height=height+1;
    			if(!queue.isEmpty())
    			{
    				queue.offer(dummyNode);
    			}
            }

			if (tmpNode.left != null) {
				queue.offer(tmpNode.left);
								
			}

			if (tmpNode.right != null) {
				queue.offer(tmpNode.right);
			}
		}
 
		return maxWeight;
	}
	
	public void BSF(Node root) {
		if (root == null) {
			return;
		}

		Queue<Node> queue = new LinkedList<>();
		queue.offer(root);

		while (!queue.isEmpty()) {
			Node tmpNode = queue.poll();
			tmpNode.displayValue();

			if (tmpNode.left != null) {
				queue.offer(tmpNode.left);
			}

			if (tmpNode.right != null) {
				queue.offer(tmpNode.right);
			}

		}
		System.out.println();
	}

}

public class TreeFindMaxWidthApp {

	public static void main(String[] args) {
		Node root = new Node(7);
		Node node1 = new Node(1);
		Node node2 = new Node(2);
		Node node3 = new Node(3);
		Node node4 = new Node(4);
		Node node5 = new Node(5);
		Node node6 = new Node(6);
		Node node7 = new Node(7);
		Node node8 = new Node(8);
		Node node9 = new Node(9);
		Node node10 = new Node(10);
		Node node11 = new Node(11);
		Node node12 = new Node(12);
		Node node13 = new Node(13);
		Node node14 = new Node(14);
		Node node15 = new Node(15);
		Node node16 = new Node(16);

		root.left = node4;
		node4.left = node2;
		node2.left = node1;
		node2.right = node3;

		root.right = node12;
		node12.left = node11;
		node12.right = node14;
		node14.left = node13;
		node14.right = node15;
		node15.right = node16;

		Tree tree = new Tree(root);
		tree.BSF(root);
		System.out.println("max width: "+tree.findMaxWidth(root));
		
		/*
		 *
            7
         4     12  
       2     11    14
      1  3       13  15
                       16

max width = 4;

		 */
	
	}

}
