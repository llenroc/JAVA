import java.util.LinkedList;
import java.util.Queue;

/* 2020-Aug-09. Oleksii Saiun. Count of All nodes 
 * 
 * 
 * 
 * */
class Tree {
	Node node;
	private int numberOfNodes=0;
	
	public int getNumberOfNodes() {
		return numberOfNodes;
	}

	public void setNumberOfNodes(int numberOfNodes) {
		this.numberOfNodes = numberOfNodes;
	}


	Tree(Node node) {
		this.node = node;
	}


	public void countNodes_approach1(Node root)
	{
		if(root==null)
		{
			return;
		}
		
		if(root!=null)
		{
			numberOfNodes=numberOfNodes+1;
		}
		
		countNodes_approach1(root.left);
		countNodes_approach1(root.right);
	}
	
	public int countNodes_approach2(Node root)
	{
		//post order recursion
		if(root==null)
		{
			return 0;
		}
		
		return 1+countNodes_approach2(root.left) + countNodes_approach2(root.right);
		
	}
	

	public void BSF(Node root) {
		if (root == null) {
			return;
		}

		Queue<Node> queue = new LinkedList<>();
		queue.offer(root);

		while (!queue.isEmpty()) {
			Node tmp = queue.poll();
			tmp.displayValue();

			if (tmp.left != null) {
				queue.offer(tmp.left);
			}

			if (tmp.right != null) {
				queue.offer(tmp.right);
			}
		}

		System.out.println();
	}
}

public class TreeCountOfAllNodesApp {

	public static void main(String[] args) {
		Node root = new Node(7);
		Node node1 = new Node(1);
		Node node2 = new Node(2);
		Node node3 = new Node(3);
		Node node4 = new Node(4);
		Node node5 = new Node(5);
		Node node6 = new Node(6);
		Node node7 = new Node(7);
		Node node8 = new Node(8);
		Node node9 = new Node(9);
		Node node10 = new Node(10);

		root.left = node4;
		

		node4.left = node3;
		node3.left= node1;
		node3.right=node2;

		root.right=node8;
		node8.left=node5;
		node8.right=node9;
		node9.left=node6;
		node9.right=node10;
		
		Tree tree = new Tree(root);
		tree.BSF(root);

		//1-st approach
		tree.countNodes_approach1(root);
		System.out.println(tree.getNumberOfNodes());
		//2-nd approach
		System.out.println(tree.countNodes_approach2(root));

		
		/*
		 *
              7
           4     8  
         3     5    9
        1  2       6  10
		 * 
		 */
		
	
	}

}
