/*2020-May-26. Oleksii Saiun. Example of [Double ended [doubly linked list]]
 * "doubly linked list" can be single without reference to the tail
 * (!) don't confuse "double-ended LinkedList" with "doubly LinkedList"
 * in a doubly liked list each node has reference to next and previous node;
 * */
class Node {
    String value;
    Node next;
    Node prev;

    Node(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public void display() {
        System.out.print("{" + value + "}");
    }
}

class LinkedList {
    Node head;
    Node tail;

    public void insertFirst(String value) {
        Node newNode = new Node(value);

        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            head.prev = newNode;
            newNode.next = head;
            head = newNode;
        }
    }

    public void insertLast(String value) {
        Node node = new Node(value);

        if (isEmpty()) {
            head = node;
            tail = node;
        } else {
            tail.next = node;
            node.prev = tail;
            tail = node;
        }
    }

    public Node removeFirst() {
        Node nodeToDelete = null;
        if (!isEmpty()) {
            nodeToDelete = head;

            if (nodeToDelete.next == null) {
                head = null;
                tail = null;

            } else {
                Node nodeNext = nodeToDelete.next;
                head = nodeNext;
                nodeNext.prev = head;
                return nodeToDelete;
            }
        }
        return nodeToDelete;
    }
    
    public Node removeLast() {
        Node nodeToDelete=null;
        if (!isEmpty()) {
            nodeToDelete = tail;

            if (nodeToDelete.prev == null) {
                head = null;
                tail = null;
   
            } else {               
                Node nodePrev = nodeToDelete.prev;
                tail = nodePrev;
                return nodeToDelete;
            }
        }
        return nodeToDelete;
    }
    public void displayForward() {
        Node currentNode = head;
        while (currentNode != null) {
            currentNode.display();
            currentNode = currentNode.next;
        }
        System.out.println("");
    }

    public void displayBackward() {
        Node currentNode = tail;
        while (currentNode != null) {
            currentNode.display();
            currentNode = currentNode.prev;
        }
        System.out.println("");
    }

    public boolean isEmpty() {
        return (head == null);
    }
}

public class DoubleEnded_DoublyLinkedList {

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.insertFirst("10");
        list.insertFirst("20");
        list.insertFirst("30");
        list.insertFirst("40");
        list.insertFirst("50");
        list.insertFirst("60");
        list.insertLast("70");
        list.insertLast("80");

        list.displayForward();
        list.displayBackward();
        
        /*
         * display forward:
         * {60}{50}{40}{30}{20}{10}{70}{80}
         * 
         * display backward:
         * {80}{70}{10}{20}{30}{40}{50}{60}        
         * */

    }

}
