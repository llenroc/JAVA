###########################################################
### top interview questions MUST know:
###########################################################
#1.
https://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/

###########################################################
###Tree
###########################################################
#1. Create a BST from sorted array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CREATE_BST_FROM_SORTED_ARRAY
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23108_CONVERT_SORTED_ARRAY_TO_BINARY_SEARCH_TREE

#2. Univalued binary tree. Simple, but tricky implementation
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23965_UNIVALUED_BINARY_TREE/LeetCode_%23965_Univalued_Binary_Tree.java

#3. All path from Root to Leave. Trciky about [return] statement
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23257_BINARY_TREE_PATHS
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/TREE/ALL_PATH_FROM_ROOT_TO_LEAVES_2/TreeAllPathFromLeaveToRootApp.java

#4. Lowest Common ancestor. 1)  return rootP or return rootQ 2) then we checks all cases for rootP and rootQ
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/LOWEST_COMMON_ANCESTOR_2

#5. Construct Increasing Order Search Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CONSTRUCT_INCREASING_ORDER_SEARCH_TREE

#6. Height of Tree - iterative and recursive
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/HEIGHT_OF_TREE

#7. BFS -Level Order Taversal. How return output in a format of List<List<Integer>>
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23102_BINARY_TREE_LEVEL_ORDER_TRAVERSAL

#8. Validate BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/VALIDATE_BST

#9. Diameter of Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23543_DIAMETER_OF_BINARY_TREE

#10. Sum of Left Leaves
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23404_SUM_OF_LEFT_LEAVES
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23404_SUM_OF_LEFT_LEAVES_2

#11.A. Distance between two nodes
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/DISTANCE_BETWEEN_TWO_NODES

#11.B. Distance path two nodes
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/FIND_PATH_BETWEEN_TWO_NODES

#12. Minimum Absolute Difference in BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23530_MINIMUM_ABSOLUTE_DIFFERENCE_IN_BST

#13. Symmetric tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23101_SYMMETRIC_TREE

#14. Find Mode in BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23501_FIND%20MOD_IN_BINARY_SEARCH_TREE

#15. Balanced Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23110_BALANCED%20BINARY%20TREE

#16. [??]Is tree Complete. A simple but tricky solution. It is tricky. it does not use common construction if (tmpNode.left!=null) {...}
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23958_CHECK_COMPLETENESS_OF_A_BINARY_TREE

#17. Merge two binary trees
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23617_MERGE_TWO_BINARY_TREES

#18. Insert node into BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/INSERT_SEARCH_NODE

#19. Construct Binary Tree from Preorder and Inorder Traversal
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23105_CONSTRUCT_BINARY_TREE_FROM_PREORDER_AND_INORDER_TRAVERSAL/Leetcode_%23105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.java

#20. Unique Binary Search Trees Catalan Number
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%2396_UNIQUE_BINARY_SEARCH_TREES_CATALAN_NUMBER

#21. Convert Binary Tree to Doubly LinkedList in [in-order] mode
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23426_CONVERT_BST_TO_SORTED_DOUBLY_LINKED_LIST

#22. [??]Flatten Binary Tree. Trciky implementation to build Triin in [for] loop
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CONVERT_FLATTEN_BINARY_TREE_TO_LINKED%20LIST

#23. Serialize and Deserialize Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23297_SERIALIZE_AND_DESERIALIZE_BINARY_TREE

#24. Find path from root to node
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/FIND_PATH_FROM_ROOT_TO_NODE

###########################################################
###Math
###########################################################
#1. Count prime numbers. The method [Sieve of Eratosthenes]
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23204_COUNT_PRIMES

#2. Power of two.
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23231_POWER_OF_TWO

#3. Catalan Number
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/MATH/CATALAN_NUMBER_2
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/MATH/CATALAN_NUMBER_1

#4. Reverse Integer
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/MATH/%237_REVERSE_INTEGER

#5. Convert Binary Number in a Linked List to Integer
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/MATH/%231290_LONGEST_SUBSTRING_WITHOUT_REPEATING_CHARACTERS
###########################################################
###Array
###########################################################
#1. Convert binary number to decimal
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/ARRAY/CONVERT_BINARY_TO_DECIMAL


###########################################################
###Linked List
###########################################################
#1. Circular linked list
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/LINKED_LIST/SINGLE_CIRCULAR_LINKED_LIST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/LINKED_LIST/CIRCULAR_DOUBLY_LINKED_LIST

#2.A Detect loop in a linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23141_LINKED_LIST_CYCLE

#3. Detect beginning of loop in a linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23142_LINKED_LIST_CYCLE_II

#4. Middle of linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23876_MIDDLE_OF_THE_LINKED_LIST

#5. Merge Two Sorted Lists. Super tricky with dummy and head node
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/LINKED_LIST/%2321_MERGE_TWO_SORTED_LISTS

#6. Merge K Sorted Lists. 
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%2323_MERGE_K_SORTED_LISTS

#7.A. Reverse Linked list. Approach 1. Stack
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/LINKED_LIST/%23206_REVERSE_LINKED_LIST_APPROACH1_STACK

#7.B. Reverse Linked list. Approach 2. Reverse on a fly
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/LINKED_LIST/%23206_REVERSE_LINKED_LIST_APPROACH2_REVERSE_ON_A_FLY

#8. Remove Duplicates from Sorted List. Need to know how to insert nodes in a linked list(tricky with pointer)
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/LINKED_LIST/%2383_REMOVE_DUPLICATES_FROM_SORTED_LIST
###########################################################
###Sliding Window Pattern
###########################################################
#1. Maximum Number of Vowels in a Substring
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%231456_MAXIMUMNUMBEROFVOWELS_IN_SUBSTRING

#2. Max Consecutive Ones numbers in a binary array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_SLIDING_WINDOW/%23485_MAX_CONSECUTIVE_ONES

#3. Longest Substring Without Repeating Characters
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_SLIDING_WINDOW/%233_LONGEST_SUBSTRING_WITHOUT_REPEATING_CHARACTERS

#4. Longest Substring with At Most K Distinct Characters
https://github.com/oleksiisaiun/JAVA/new/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_SLIDING_WINDOW

###########################################################
###Two Pointers Pattern
###########################################################
#1. Two Sum II - Input array is sorted
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23167_TWO_SUM_II-INPUT_ARRAY_IS_SORTED

#2.1.Remove Duplicates from Sorted Array - without extra space
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%2326_REMOVE_DUPLICATES_FROM_SORTED_ARRAY
#2.2.Remove Duplicates from Sorted Array - with extra space
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/PATTERN_TWO_POINTERS/REMOVE_DUPS_SORTED_ARR_WITH_EXTRA_SPACE

#3. Remove element - quite tricky, but simple using two pointers
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%2327_REMOVE_ELEMENT

#4. Squares of a Sorted Array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23977_SQUARES_OF_SORTED%20ARRAY

#5. Reverse String
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23344_REVERSE_STRING

#6. Monolitic Array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23896_MONOTONIC_ARRAY

#7. Dutch flag national problem
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%2375_SORT_COLORS

#8_1. 3sum. Solving using hashmap approach
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%2315_3Sum_APPROACH1_HASHMAP
#8_2. 3sum. Solving using two pointers approach
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%2315_3SUM_APPROACH2/LEETCODE_%2315_3Sum_approach2.java

###########################################################
###Fast and Slow Pattern
###########################################################
#1. Detect loop in a linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23141_LINKED_LIST_CYCLE

#2. Detect beginning of loop in a linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23142_LINKED_LIST_CYCLE_II

#3. Middle of linked list. Fast and Slow pattern
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_FAST_AND_SLOW/%23876_MIDDLE_OF_THE_LINKED_LIST

###########################################################
#B. SUB ARRAY PROBLEMS
#1. Subarray Product Less Than K. The tickies part is here  = to find number of possible combination  for sub array is just calc by formula [i;j] = j-i+1    
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23713_SUBARRAY_PRODUCT_LESS%20_THAN_K

#2. 3Sum Smaller. Tricky:                /*
                                   It's pretty easy to understand since we are sorting the array,
                                  now anything between left and right, if it satisfies the condition, will also satisfy the                condition of sum smaller   
                                  than target. Since we are interested to find all the possible                    combinations, so each number between the two limit  
                                  will make different combinations with                  the fixed element. 
*/
   
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/PATTERN_TWO_POINTERS/%23259_3SUM_SMALLER
###########################################################
###Heaps
###########################################################
***********************************************************
#A. Largest smallest elements problem
#1. Kth Largest Element in an Array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23215_KTH_LARGEST_ELEMENT_IN_ARRAY

#2.Top K Frequent Elements
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23347_TOP_K_FREQUENT_ELEMENTS

#3.Top K Frequent Elements.  Super trick in comparator: based on a task we handle two cases if values are the same we return value of compare of strings else check freq
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23692_TOP_K_FREQUENT_WORDS

#4. Sort Array by Increasing Frequency. Super trick in comparator
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%231636_SORT_ARRAY_BY_INCREASING_FREQUENCY

#5. Kth Largest Element in a Stream
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23703_KTH_LARGEST_ELEMENT_IN_STREAM

***********************************************************
#B. Find min/max distance
#7. K Closest Points to Origin
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23973_K_CLOSEST_POINTS_TO_ORIGIN
***********************************************************
#C. Distance
#9. Reorganize String
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23767_REORGANIZE_STRING

***********************************************************
#D. Find min/max cost
#10. Minimum Cost to Connect Sticks
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%231167_MINIMUM_COST_CONNECT_STICKS

***********************************************************
#D.Merge K lists. Super tricky with dummy and head nodes
#11. Minimum Cost to Connect Sticks
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%2323_MERGE_K_SORTED_LISTS
***********************************************************
#E. Reordering String
#11. TASK_SCHEDULER
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/HEAPS/%23621_TASK_SCHEDULER
***********************************************************
##F. Using a new node
#12. Smallest Range Elements from K Lists
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23632_SMALLEST_RANGE_COVERING_ELEMENTS_FROM_K_LISTS

##G. Two heaps pattern
#13. Find Median from Data Stream
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HEAPS/%23295_FIND_MEDIAN_FROM_DATA_STREAM
###########################################################
###Sorting
###########################################################
#1. Merge Sort
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SORTING/%23912_SORT_ARRAY

#2. Move Zeroes to the right end
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SORTING/%23283_MOVE_ZEROES

###########################################################
###HashMap
###########################################################
#1. First Unique Character in a String
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%23451_FIRST_UNIQUE_CHARACTER_IN_STRING
###########################################################

###########################################################
###Array
###########################################################
#1. Monotonic Array. (!) one of the most popular Facebook's interview questions
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/ARRAY/%23896_MONOTONIC_ARRAY

#2. Merge Sorted arrays. Two pointers approach
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/ARRAY/%23896_MONOTONIC_ARRAY/%2388_MERGE_SORTED_ARRAY

###########################################################
###Hash Map
###########################################################
#1. Two Sum - using hashmap approach
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%231_TWO_SUM

#2. Single Number
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%23136_SINGLE_NUMBER
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%23137_SINGLE_NUMBER_II
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%23260_SINGLE_NUMBER_III

#3. Intersection of Two Arrays
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/HASHMAP/%23349_INTERSECTION_OF_TWO_ARRAYS

###########################################################
###Palindrome
###########################################################
#1. Palindrome number. Interesting approach how join together reversed numbers
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/MATH/%2392_PALINDROME_NUMBER

###########################################################
###SQL
###########################################################
#1. How make [exists] and [not exists] condition at the same time
    Find buyers who bought Samsung, but have never bought iphone
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231083_SALES%20ANALYSIS_II

#2. How make [exists] and [not exists] condition at the same time
    Find buyers who bought product A and B, but have never bought product C
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231398_CUSTOMERS_WHO_BOUGHT_PRODUCTS_A_AND_B_BUT_NOT_C

#3. Example with [not] condition
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%23620_NOT%20BORING%20MOVIES

#4. Regular expression
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231517_FIND_USERS_WITH_VALID_E-MAILS

