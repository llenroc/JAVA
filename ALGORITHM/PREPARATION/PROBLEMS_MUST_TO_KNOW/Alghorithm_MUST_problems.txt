###########################################################
### top interview questions MUST know:
###########################################################
#1.
https://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/

###########################################################
###Tree
###########################################################
#1. Create a BST from sorted array
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CREATE_BST_FROM_SORTED_ARRAY
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23108_CONVERT_SORTED_ARRAY_TO_BINARY_SEARCH_TREE

#2. Univalued binary tree. Simple, but tricky implementation
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23965_UNIVALUED_BINARY_TREE/LeetCode_%23965_Univalued_Binary_Tree.java

#3. All path from Root to Leave. Trciky about [return] statement
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23257_BINARY_TREE_PATHS
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/TREE/ALL_PATH_FROM_ROOT_TO_LEAVES_2/TreeAllPathFromLeaveToRootApp.java

#4. Lowest Common ancestor. 1)  return rootP or return rootQ 2) then we checks all cases for rootP and rootQ
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/LOWEST_COMMON_ANCESTOR_2

#5. Construct Increasing Order Search Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CONSTRUCT_INCREASING_ORDER_SEARCH_TREE

#6. Height of Tree - iterative and recursive
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/HEIGHT_OF_TREE

#7. BFS -Level Order Taversal. How return output in a format of List<List<Integer>>
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23102_BINARY_TREE_LEVEL_ORDER_TRAVERSAL

#8. Validate BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/VALIDATE_BST

#9. Diameter of Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23543_DIAMETER_OF_BINARY_TREE

#10. Sum of Left Leaves
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23404_SUM_OF_LEFT_LEAVES
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23404_SUM_OF_LEFT_LEAVES_2

#11.A. Distance between two nodes
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/DISTANCE_BETWEEN_TWO_NODES

#11.B. Distance path two nodes
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/FIND_PATH_BETWEEN_TWO_NODES

#12. Minimum Absolute Difference in BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23530_MINIMUM_ABSOLUTE_DIFFERENCE_IN_BST

#13. Symmetric tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23101_SYMMETRIC_TREE

#14. Find Mode in BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23501_FIND%20MOD_IN_BINARY_SEARCH_TREE

#15. Balanced Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23110_BALANCED%20BINARY%20TREE

#16. [??]Is tree Complete. A simple but tricky solution. It is tricky. it does not use common construction if (tmpNode.left!=null) {...}
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23958_CHECK_COMPLETENESS_OF_A_BINARY_TREE

#17. Merge two binary trees
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23617_MERGE_TWO_BINARY_TREES

#18. Insert node into BST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/INSERT_SEARCH_NODE

#19. Construct Binary Tree from Preorder and Inorder Traversal
https://github.com/oleksiisaiun/JAVA/blob/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23105_CONSTRUCT_BINARY_TREE_FROM_PREORDER_AND_INORDER_TRAVERSAL/Leetcode_%23105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.java

#20. Unique Binary Search Trees Catalan Number
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%2396_UNIQUE_BINARY_SEARCH_TREES_CATALAN_NUMBER

#21. Convert Binary Tree to Doubly LinkedList in [in-order] mode
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23426_CONVERT_BST_TO_SORTED_DOUBLY_LINKED_LIST

#22. [??]Flatten Binary Tree. Trciky implementation to build Triin in [for] loop
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/CONVERT_FLATTEN_BINARY_TREE_TO_LINKED%20LIST

#23. Serialize and Deserialize Binary Tree
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23297_SERIALIZE_AND_DESERIALIZE_BINARY_TREE

#24. Find path from root to node
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/TREE/FIND_PATH_FROM_ROOT_TO_NODE

###########################################################
###Math
###########################################################
#1. Count prime numbers. The method [Sieve of Eratosthenes]
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23204_COUNT_PRIMES

#2. Power of two.
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%23231_POWER_OF_TWO

#3. Catalan Number
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/MATH/CATALAN_NUMBER_2
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/MATH/CATALAN_NUMBER_1

#4. Reverse Integer
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/MATH/%237_REVERSE_INTEGER


###########################################################
###Array
###########################################################
#1. Convert binary number to decimal
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/ARRAY/CONVERT_BINARY_TO_DECIMAL


###########################################################
###Linked List
###########################################################
#1. Circular linked list
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/LINKED_LIST/SINGLE_CIRCULAR_LINKED_LIST
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/LINKED_LIST/CIRCULAR_DOUBLY_LINKED_LIST

###########################################################
###Sliding Window
###########################################################
#1. Maximum Number of Vowels in a Substring
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/%231456_MAXIMUMNUMBEROFVOWELS_IN_SUBSTRING

###########################################################
###SQL
###########################################################
#1. How make [exists] and [not exists] condition at the same time
    Find buyers who bought Samsung, but have never bought iphone
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231083_SALES%20ANALYSIS_II

#2. How make [exists] and [not exists] condition at the same time
    Find buyers who bought product A and B, but have never bought product C
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231398_CUSTOMERS_WHO_BOUGHT_PRODUCTS_A_AND_B_BUT_NOT_C

#3. Example with [not] condition
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%23620_NOT%20BORING%20MOVIES

#4. Regular expression
https://github.com/oleksiisaiun/JAVA/tree/master/ALGORITHM/DATA-STRUCTURES/SOLUTIONS/LEETCODE/SQL/%231517_FIND_USERS_WITH_VALID_E-MAILS

